; (x Â± iy) given (x, y) = (Re(z), Im(z))

(define (make-from-real-imag x y)
    (cons x y))
(define (real-part-rectangular z)
    (car z))
(define (imag-part-rectangular z)
    (cdr z))
(define (add-complex z1 z2)
    (make-from-real-imag (+ (real-part z1) (real-part z2))
                         (+ (imag-part z1) (imag-part z2))))
(define (sub-complex z1 z2)
    (make-from-real-imag (- (real-part z1) (real-part z2))
                         (- (imag-part z1) (imag-part z2))))
(define (Mag-rectangular z)
    (sqrt (+ (square (real-part-rectangular z)) (imag-part-rectangular z))))
(define (Angle-rectangular z)
    (atan (imag-part-rectangular z) (real-part-rectangular z)))
(define (make-from-mag-ang r a)
    (cons (* r (cos a)) (* r (sin a))))

(define (mul-complex z1 z2)
    (make-from-mag-ang (* (Mag z1) (Mag z2)) 
                       (+ (Angle z1) (Angle z1))))
(define (div-complex z1 z2)
    (make-from-mag-ang (/ (Mag z1) (Mag z2))
                       (- (Angle z1) (Angle z2))))

; z = (r, angle) (basically phase domain representation)

(define (real-part-polar z)
    (* (Mag-polar z) (cos (Angle-polar z))))
(define (imag-part-polar z)
    (* (Mag-polar z) (sin (Angle-polar z))))
(define (Mag-polar z)
    (car z))
(define (Angle-polar z)
    (cdr z))
(define (make-from-real-imag x y)
    (cons (sqrt (+ square x) (square y)))
          (atan y x))
(define (make-from-mag-ang r a)
    (cons r a))

; Defining tags that allow choosing from both representations as needed

(define (attach-tag type-tag contents)
    (cons type-tag contents))

(define (type-tag datum)
    (if (pair? datum)
        (car datum)
        (error "Bad tagged datum - TYPE-TAG: " datum)))
(define (contents datum)
    (if (pair? datum)
        (cdr datum)
        (error "Bad tagged datum - CONTENTS: " datum)))

(define (rectangular? z)
    (eq? (type-tag z) 'rectangular))
(define (polar? z)
    (eq? (type-tag z) 'polar))

(define (make-from-real-imag-rectangular x y)
    (attach-tag 'rectangular (x y)))
(define (make-from-mag-ang-rectangular r a)
    (attach-tag 'rectangular (cons (* r (cos a)) (* r (sin a)))))

(define (make-from-real-imag-polar x y)
    (attach-tag 'polar (cons (sqrt (+ (square x) (square y))) (atan x y))))
(define (make-from-mag-ang-polar r a)
    (attach-tag 'polar (cons r a)))

(define (real-part z)
    (cond ((rectangular? z) (real-part-rectangular (contents z)))
          ((polar? z)       (real-part-polar       (contents z)))
          (else (error "Unknown type - REAL-PART: " z))))
(define (imag-part z)
    (cond ((rectangular? z) (imag-part-rectangular (contents z)))
          ((polar? z)       (imag-part-polar       (contents z)))
          (else (error "Unknown type - IMAG-PART: " z))))
(define (Mag z)
    (cond ((rectangular? z) (Mag-rectangular (contents z)))
          ((polar? z)       (Mag-polar       (contents z)))
          (else (error "Unknown type - MAG: " z))))
(define (Angle z)
    (cond ((rectangular? z) (Angle-rectangular (contents z)))
          ((polar? z)       (Angle-polar       (contents z)))
          (else (error "Unknown type - ANGLE: " z))))

(define (make-Re-Im x y)
    (make-from-real-imag-rectangular x y))
(define (make-Mag-Ang r a)
    (make-from-mag-ang-polar r a))