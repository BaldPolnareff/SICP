(define (variable? e)
    (symbol? e))
(define (same-variable? v1 v2)
    (and (variable? v1) (equal? v1 v2)))

(define (=number? expr num)
    (and (number? expr) (= expr num)))

(define (make-sum a1 a2)
    (cond ((and (number? a1) (number? a2)) (+ a1 a2))
          ((=number? a1 0) a2)
          ((=number? a2 0) a1)
          (else (list '+ a1 a2))))
(define (make-product m1 m2)
    (cond ((and (number? m1) (number? m2)) (* m1 m2))
          ((or (=number? m1 0) (=number? m2 0)) 0)
          ((=number? m1 1) m2)
          ((=number? m2 1) m1)
          (else (list '* m1 m2))))
(define (sum? x)
    (and (pair? x) (eq? (car x) '+)))
(define (addend s)
    (if (sum? s)
        (cadr s)
        (error "Not a sum")))
(define (augend s)
    (if (sum? s)
        (caddr s)
        (error "Not a sum")))
(define (product? x)
    (and (pair? x) (eq? (car x) '*)))
(define (multiplier p)
    (if (product? p)
        (cadr p)
        (error "Not a product")))
(define (multiplicand p)
    (if (product? p)
        (caddr p)
        (error "Not a product")))

(define (exponentiation? x)
    (and (pair? x) (eq? (car x) '**)))
(define (base e)
    (if (exponentiation? e)
        (cadr e)
        (error "Not an exponentiation")))
(define (exponent e)
    (if (exponentiation? e)
        (caddr e)
        (error "Not an exponentiation")))

(define (make-exponentiation base exp)
    (cond ((and (number? base) (number? exp)) (expt base exp))
          ((=number? exp 0) 1)
          ((=number? exp 1) base)
          (else (list '** base exp))))

(define (deriv expr var)
    (cond ((number? expr) 0)
          ((variable? expr)
                (if (same-variable? expr var)
                    1
                    0))
          ((sum? expr)     (make-sum (deriv (addend expr) var) (deriv (augend expr) var)))
          ((product? expr) (make-sum (make-product (multiplier expr) (deriv (multiplicand expr) var)) 
                              (make-product (multiplicand expr) (deriv (multiplier expr) var))))
          ((exponentiation? expr) (make-product (exponent expr) 
                                     (make-product (make-exponentiation (base expr) (make-sum (exponent expr) -1)) 
                                                   (deriv (base expr) var))))
          (else (error "unknown expression type: DERIV" expr))))