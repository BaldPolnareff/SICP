; SICP Exercise 2.2

(define (make-pt x y)
    (cons x y))

(define O (make-pt 0 0))

(define (x-coord P P0)
    (- (car P) (car P0)))
(define (y-coord P P0)
    (- (cdr P) (cdr P0)))
(define (coinc-point? P1 P2)
    (define x1 (x-coord P1))
    (define y1 (y-coord P1))
    (define x2 (x-coord P2))
    (define y2 (y-coord P2))
    (and (= x1 x2) (= y1 y2))    
)
(define (dist P1 P2)
    (let ((deltax (abs (- (x-coord P1) (x-coord P2)))) (deltay (abs (- (y-coord P1) (y-coord P2)))))
        (sqrt (+ (square deltax) (square deltay)))))

(define (make-seg P1 P2)
    (define len (dist P1 P2))
    (cons (cons P1 P2) len))

(define (seg-start seg)
    (car (car seg)))

(define (seg-end seg)
    (cdr (car seg)))

(define (print-point P)
    (newline)
    (display "(x, y) = ")
    (display "(")
    (display (x-coord P))
    (display ", ")
    (display (y-coord P))
    (display ")"))

(define (print-seg seg)
    (define P1 (seg-start seg))
    (define P2 (seg-end seg))
    (define Len (cdr seg))
    (display "P1: ")
    (print-point P1)
    (newline)
    (display "P2: ")
    (print-point P2)
    (newline)
    (display "Length: ")
    (display Len))
(define (midpoint-seg seg)
    (define P1 (seg-start seg))
    (define P2 (seg-end seg))
    (define x1 (x-coord P1))
    (define x2 (x-coord P2))
    (define y1 (y-coord P1))
    (define y2 (y-coord P2))
    (define (avg a b)
        (/ (+ a b) 2))
    (make-pt (avg x1 x2) (avg y1 y2))
)

; SICP Exercise 2.3
(define (dot-prod P1 P2)
    (define x1 (x-coord P1))
    (define x2 (x-coord P2))
    (define y1 (y-coord P1))
    (define y2 (y-coord P2))
    (+ (* x1 x2) (* y1 y2))
)

(define (consec-seg? segA segB)
    (define P1 (seg-start segA))
    (define P2 (seg-end segA))
    (define P3 (seg-start segB))
    (define P4 (seg-end segB))
    (or (coinc-point? P1 P3)
        (coinc-point? P1 P4)
        (coinc-point? P2 P3)
        (coinc-point? P2 P4))    
)

(define (junction segA segB)
    (define P1 (seg-start segA))
    (define P2 (seg-end segA))
    (define P3 (seg-start segB))
    (define P4 (seg-end segB))
    (if (consec-seg? segA segB)
        (cond ((coinc-point? P1 P3) P1)
              ((coinc-point? P1 P4) P1)
              ((coinc-point? P2 P3) P2)
              ((coinc-point? P2 P4) P2)
        )
        (error "No junction between the input segments"))    
)

(define (translate-pt P P0)

)

(define (perpendicular? v1 v2)
    (= (dot-prod v1 v2) 0))

(define (rect-orig segA segB)

    (if (perpendicular? v1 v2)
        (junction segA segB)
        (error "Input segments must be perpendicular!")))

(define (dot-product v1 v2)
    body)

(define (make-rectangle )
    body)

(define (rectangle-per h b)
    (* 2 (+ b h)))

(define (rectangle-area h b)
    (if (= h b )
        (square b)
        (* h b))    
)