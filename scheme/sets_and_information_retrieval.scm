; SICP Exercise 2.66

(define (entry tree)
    (car tree))
(define (left-branch tree)
    (cadr tree))
(define (right-branch tree)
    (caddr tree))
(define (make-tree entry left right)
    (list entry left right))

(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts)
                                              right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))

(define (list-to-tree list)
    (car (partial-tree list (length list))))

(define (key record)
    (car record))
(define (data record)
    (cdr record))
(define (make-record key data)
    (list key data))

(define database-bastardi
    (list (make-record 1 'Ges√π)
          (make-record 2 'Maria)
          (make-record 3 'Giuseppe)
          (make-record 4 'PadrePio)
          (make-record 5 'Cristoddio)
          (make-record 6 'GiovanniPaoloFecondo)
          (make-record 7 'LaDremaDiTognetti)))

(define (lookup in-key database)
    (cond ((null? database) (display "No entries found"))
          ((= in-key (key (car database))) (car database))
          ((< in-key (key (car database))) (lookup in-key (left-branch  database)))
          ((> in-key (key (car database))) (lookup in-key (right-branch database)))))