(define (make-interval l u)
    (cons (min l u) (max l u)))
(define (lower-bound I)
    (car I))
(define (upper-bound I)
    (cdr I))

(define (width-interval I)
    (define l (lower-bound I))
    (define u (upper-bound I))
    (/ (- u l) 2)
)
(define (length-interval I)
    (define l (lower-bound I))
    (define u (upper-bound I))
    (* (width-interval I) 2)
)

(define (null-interval? I)
    (= (length-interval I) 0)
)
; Adding intervals -> I1 + I2 -> I3 = (l(I1) + l(I2), u(I1) + u(I2))
(define (add-interval I1 I2)
    (define l1 (lower-bound I1))
    (define l2 (lower-bound I2))
    (define u1 (upper-bound I1))
    (define u2 (upper-bound I2))
    (if (or (null-interval? I1) (null-interval? I2))
        (error "Invalid operation: one of the intervals is null!")
        (make-interval (+ l1 l2) (+ u1 u2))))

(define (mul-interval I1 I2)
    (define l1 (lower-bound I1))
    (define l2 (lower-bound I2))
    (define u1 (upper-bound I1))
    (define u2 (upper-bound I2))
    (if (or (null-interval? I1) (null-interval? I2))
         (error "Invalid operation: one of the intervals is null!")
         (let ((p1 (* l1 l2))
               (p2 (* l1 u2))
               (p3 (* l2 u1))
               (p4 (* u1 u2)))
              (make-interval (min p1 p2 p3 p4) (max p1 p2 p3 p4)))))

; I1/I2 -> I1 * reciprocal(I2)
; reciprocal(I) = (1/l, 1/u)

(define (rec-interval I)
    (define l (lower-bound I))
    (define u (upper-bound I))
    (define L 
        (if (= l 0)
            0
            (/ 1.0 l)))
    (define U 
        (if (= u 0)
            0
            (/ 1.0 u)))
    (if (null-interval? I)
         (error "Invalid operation: the interval is null!")
         (make-interval L U)))

(define (div-interval I1 I2)
    (define l1 (lower-bound I1))
    (define l2 (lower-bound I2))
    (define u1 (upper-bound I1))
    (define u2 (upper-bound I2))
    (if (or (null-interval? I1) (null-interval? I2))
         (error "Invalid operation: one of the intervals is null!")
         (mul-interval I1 (rec-interval I2))))

(define (sub-interval I1 I2)
    (define l1 (lower-bound I1))
    (define l2 (lower-bound I2))
    (define u1 (upper-bound I1))
    (define u2 (upper-bound I2))
    (if (or (null-interval? I1) (null-interval? I2))
         (error "Invalid operation: one of the intervals is null!")
         (make-interval (- l1 u2) (- u1 l2))))